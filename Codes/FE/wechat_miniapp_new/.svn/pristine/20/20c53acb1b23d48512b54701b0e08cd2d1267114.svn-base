const
  activityService = require('../../services/activity-service.js'),
  utilStatistics = require("../../utils/statistics.js"),
  articleService = require("../../services/article.js"),
  cardsService = require('../../services/cards.js'),
  config = require('../../config.js'),
  base64 = require('../../utils/base64.js'),
  utils = require('../../utils/util.js');

let self;
Page({

  /**
   * 页面的初始数据
   */
  data: {
    id: "",
    h5Info: null,
    articleInfo: null,
    coverSaveStatus: 0,
    type: 0, //判断活动类型
    canvasW: ''
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function(options) {
    self = this;
    self.data.id = options.id || '';
    self.data.from_user = options.from_user || '';
    self.data.from_company = options.from_company || '';
    self.setData({
      type: options.type || '',
      articleid: options.articleid || ''
    })

    wx.showLoading({
      title: '数据加载中'
    });
    if (!!self.data.articleid){//文章
      wx.setNavigationBarTitle({
        title: '你的社交营销小助手'
      });
      articleService.articalDetail({
        id: self.data.articleid
      }, function (err, res) {
        if (res.status == 0) {
          self.data.articleInfo = res.data;
          self.buildArticleImg();
        } else {
          self.errMessage();
        }
      })
    } else {//活动
      activityService.activityInfo(self.data.id, (err, res) => {
        if (err) return self.errMessage(err);
        if (res.status !== 0) return self.errMessage(res.message);
        wx.setNavigationBarTitle({
          title: res.data.name
        });
        self.data.h5Info = res.data;
        console.log("信息", self.data.h5Info)
        if(self.data.type == '3'){
          self.buildPostImg();
        } else {
          self.buildImg();
        }
        
        // self.buildImgReport();
      });
    }
    wx.hideShareMenu();
  },
  buildImg: function() {
    let self = this;
    wx.showLoading({
      title: '正在生成图片'
    });
    wx.createSelectorQuery().select('.cover_box').fields({
      size: true,
    }, (box) => {
      let
        qrcodeInfo = {
          source: null,
          size: {
            width: 100,
            height: 100
          }
        },
        coverInfo = {
          source: null,
          size: {
            width: box.width,
            height: box.height - qrcodeInfo.size.height - 10
          }
        };
      Promise.all([
        new Promise((resolve, reject) => {
          // cover image info
          let params = [`c_1`, `x_0`, `y_0` , `h_${Math.round(box.height)}`];
          console.log(`${self.data.h5Info.cover}@${params.join(',')}`)
          wx.getImageInfo({
            src: `${self.data.h5Info.cover}@${params.join(',')}`,
            success: resolve,
            fail: reject
          })
        }),
        new Promise((resolve, reject) => {
          // todo: 生成带登陆者身份的小程序
          switch (true) {
            case self.data.type == '3': //海报，小程序码为名片详情
              var option = {
                data: {
                  "from_user": self.data.from_user,
                  "from_company": self.data.from_company
                },
                type: 'conf_card'
              };
              break;
            default: 
              var option = {
                data: {
                  "as_belong_user": getApp().globalData.userInfo.data[0].user_uuid,
                  "id": self.data.h5Info.relationId,
                  "goodsCount": self.data.h5Info.goodsNumber
                },
                type: 'conf_manu'
              };;
          }
         

          cardsService.saveCustomConfig(option, function (err, res) {
            if (res.status == 0) {
              resolve(res.data);
            } else {
              reject();
            }
          })
        }).then((id) => {
          return new Promise((resolve, reject) => {
            activityService.creatQrcode(JSON.stringify({
              "width": 200,
              "page": "pages/index/index",
              "type": self.data.h5Info.goodsNumber > 0?'link':'wx',
              "id": self.data.h5Info.goodsNumber > 0 ? self.data.h5Info.relationId:'',
              "isHyaline": true,
              "scene": !!self.data.type ? `act=card&id=${id}` : `act=h5&profile_key=${id}`
            }), function (err, res) {
              if (res.status == 0) {
                console.log("小程序吗", res.data)
                if (self.data.h5Info.goodsNumber > 0){
                  base64.base64src(res.data.file, res => {
                    console.log(res) // 返回图片地址，直接赋值到image标签即可
                    wx.getImageInfo({
                      src: res,
                      success: resolve,
                      fail: reject
                    })
                  });
                }else{
                  wx.getImageInfo({
                    src: res.data.file,
                    success: resolve,
                    fail: reject
                  })
                }
               
               
              } else {
                reject();
              }
            })
          })
        })
      ]).then((result) => {
        coverInfo.source = result[0];
        qrcodeInfo.source = result[1];
        let offsetHeight = coverInfo.source.height - coverInfo.size.height;
        const ctx = wx.createCanvasContext('canvas_cover');
        // 设置底色
        ctx.setFillStyle('white');
        ctx.fillRect(0, 0, box.width, box.height);
        // 绘制封面
        ctx.drawImage(coverInfo.source.path,
          0, -15, coverInfo.size.width, coverInfo.size.height, coverInfo.size.width, coverInfo.size.height
        );

        
        // 绘制小程序码
        ctx.drawImage(qrcodeInfo.source.path,
          box.width - qrcodeInfo.size.width - 10,
          coverInfo.size.height + 5 ,
          qrcodeInfo.size.width,
          qrcodeInfo.size.height
        );

        // 绘制活动名称
        let name = self.data.h5Info.name,
          maxWidth = box.width - qrcodeInfo.size.width - 5,
          maxLength = Math.floor(maxWidth / 18);
        ctx.setTextBaseline('top');
        ctx.setFontSize(15);
        ctx.setTextAlign('left');
        ctx.setFillStyle('black');
        if (name.length <= maxLength) {
          ctx.fillText(name, 10, coverInfo.size.height + 23, maxWidth);
        } else {
          ctx.fillText(name.substring(0, maxLength), 10, coverInfo.size.height + 10, maxWidth);
          ctx.fillText(name.substring(maxLength), 10, coverInfo.size.height + 20 * 2 - 10, maxWidth);
        }
        // 绘制提示文字
        ctx.setFillStyle('#999')
        ctx.setFontSize(11);
        ctx.setTextAlign('left');
        ctx.fillText("长按识别" + (self.data.h5Info.goodsNumber > 0?'二维码':'小程序码') +"查看H5", 10, box.height - 46);
        ctx.draw(true, self.saveImage);

        wx.hideLoading();
      }).catch(self.errMessage);
    }).exec();
  },
  buildPostImg: function () {
    let self = this;
    wx.createSelectorQuery().select('.cover_box').fields({
      size: true,
    }, (box) => {
      let
        qrcodeInfo = {
          source: null,
          size: {
            width: 100,
            height: 100
          }
        },
        coverInfo = {
          source: null,
          size: {
            width: box.width,
            height: box.height - qrcodeInfo.size.height - 10
          }
        };
      Promise.all([
        new Promise((resolve, reject) => {
          // todo: 生成带登陆者身份的小程序
          var option = {
            data: {
              "from_user": self.data.from_user,
              "from_company": self.data.from_company
            },
            type: 'conf_card'
          };

          cardsService.saveCustomConfig(option, function (err, res) {
            if (res.status == 0) {
              resolve(res.data);
            } else {
              reject();
            }
          })
        }).then((id) => {
          return new Promise((resolve, reject) => {
            activityService.creatQrcode(JSON.stringify({
              "width": 200,
              "page": "pages/index/index",
              "id": self.data.h5Info.relationId,
              "isHyaline": true,
              "scene": `act=card&id=${id}`
            }), function (err, res) {
              if (res.status == 0) {
                wx.getImageInfo({
                  src: res.data.file,
                  success: resolve,
                  fail: reject
                })
              } else {
                reject();
              }
            })
          })
        }),
        new Promise((resolve, reject) => {//获取海报图片
          // cover image info
          var poster = self.data.h5Info.posterImage;
          if (!!poster) {
            var posterImg = JSON.parse(poster),
              posterPng = posterImg.png;
            wx.getImageInfo({
              src: posterPng + '@s_0,h_' + parseInt(coverInfo.size.height),
              success: resolve,
              fail: reject
            })
          } else {
            resolve(true);
          }
        })
      ]).then((result) => {
        qrcodeInfo.source = result[0];
        coverInfo.source = result[1];
        self.setData({
          canvasW: (coverInfo.source.width * 750 / wx.getSystemInfoSync().windowWidth) + 'rpx'
        })
        const ctx = wx.createCanvasContext('canvas_cover');
        // 设置底色
        ctx.setFillStyle('white');
        ctx.fillRect(0, 0, box.width, box.height);
        // 绘制封面
        ctx.drawImage(coverInfo.source.path,
          0, 0, coverInfo.source.width, coverInfo.size.height
        );

        // 绘制小程序码
        ctx.drawImage(qrcodeInfo.source.path,
          coverInfo.source.width - qrcodeInfo.size.width - 10,
          coverInfo.size.height + 5,
          qrcodeInfo.size.width,
          qrcodeInfo.size.height
        );
        //绘制名片信息
        let name = self.data.h5Info.employeeInfo.name,
          phone = self.data.h5Info.employeeInfo.phone,
          job = self.data.h5Info.employeeInfo.job,
          businessName = self.data.h5Info.businessInfo.businessName;

        job = job.length > 10 ? job.substring(0, 10) : job;

        let nickname = name.length > 6 ? name.substring(0, 6) + '...' : name;
        utils.fillTextFn(ctx, nickname, 12, '#000000', 10, coverInfo.size.height + 16, box.width - 10);

        if (coverInfo.source.width - qrcodeInfo.size.width - 20 < ctx.measureText(nickname).width + ctx.measureText(phone).width) {
          //一行显示不下时
          //绘制职位
          utils.fillTextFn(ctx, phone, 10, '#000000', 10, box.height - 75, box.width - 10);
          utils.fillTextFn(ctx, job, 10, '#999999', 10, box.height - 55, box.width - 10);
          //绘制分割线
          ctx.drawImage('../../images/article-line.png', 10, coverInfo.size.height + 78, coverInfo.source.width - qrcodeInfo.size.width - 30, 1);
          //绘制公司名称
          utils.fillTextFn(ctx, businessName, 10, '#999999', 10, box.height - 25, box.width - 10);
        } else {
          utils.fillTextFn(ctx, phone, 12, '#000000', 20 + ctx.measureText(nickname).width, coverInfo.size.height + 16, box.width - 20);
          utils.fillTextFn(ctx, job, 10, '#999999', 10, box.height - 68, box.width - 10);
          //绘制分割线
          ctx.drawImage('../../images/article-line.png', 10, coverInfo.size.height + 68, coverInfo.source.width - qrcodeInfo.size.width - 30, 1);
          //绘制公司名称
          utils.fillTextFn(ctx, businessName, 10, '#999999', 10, box.height - 30, box.width - 10);
        }


        ctx.draw(true, self.saveImage);

        wx.hideLoading();
      }).catch(self.errMessage);
    }).exec();
  },
  buildArticleImg: function(){
    let self = this;
    wx.showLoading({
      title: '正在生成图片'
    });
    wx.createSelectorQuery().select('.cover_box').fields({
      size: true,
    }, (box) => {
      let
        qrcodeInfo = {
          source: null,
          size: {
            width: 100,
            height: 100
          }
        },
        coverInfo = {
          source: null,
          size: {
            width: box.width,
            height: box.height - qrcodeInfo.size.height - 190
          }
        };
      Promise.all([
        new Promise((resolve, reject) => {
          // cover image info
          let params = [`c_1`, `x_0`, `y_0`, `h_${Math.round(box.height)}`];
          wx.getImageInfo({
            src: `${self.data.articleInfo.descImg}@${params.join(',')}`,
            success: resolve,
            fail: reject
          })
        }),
        new Promise((resolve, reject) => {
          // todo: 生成带登陆者身份的小程序
          let option = {
            data: {
              "articleid": self.data.articleInfo.id,
              "from_user": self.data.from_user,
              "from_company": self.data.from_company
            },
            type: 'conf_manu'
          };
          cardsService.saveCustomConfig(option, function (err, res) {
            if (res.status == 0) {
              resolve(res.data);
            } else {
              reject();
            }
          })
        }).then((id) => {
          return new Promise((resolve, reject) => {
            activityService.creatQrcode(JSON.stringify({
              "width": 200,
              "page": "pages/index/index",
              "isHyaline": true,
              "scene": `act=article&id=${id}`
            }), function (err, res) {
              if (res.status == 0) {
                wx.getImageInfo({
                  src: res.data.file,
                  success: resolve,
                  fail: reject
                })
              } else {
                reject();
              }
            })
          })
        }),
        new Promise((resolve, reject) => {
          let userInfo = getApp().globalData.userInfo;
          wx.getImageInfo({
            src: `${userInfo.avatarUrl}`,
            success: resolve,
            fail: reject
          })
        }),
        new Promise((resolve, reject) => {
          activityService.personalInfoQuery({}, (err, res) => {
            if (res.status == 0) {
              resolve(res.data);
            } else {
              reject();
            }
          })
        })
      ]).then((result) => {
        coverInfo.source = result[0];
        qrcodeInfo.source = result[1];
        const ctx = wx.createCanvasContext('canvas_cover');
        // 设置底色
        ctx.setFillStyle('white');
        ctx.fillRect(0, 0, box.width, box.height);
        // 绘制封面
        ctx.drawImage(coverInfo.source.path,
          10, 10, coverInfo.size.width - 20, coverInfo.size.height - 20
        );
        // 绘制小程序码
        ctx.drawImage(qrcodeInfo.source.path,
          box.width - qrcodeInfo.size.width - 15,
          coverInfo.size.height + 170,
          qrcodeInfo.size.width,
          qrcodeInfo.size.height
        );

        //绘制名片信息
        let userInfo = result[3];
        //绘制头像
        ctx.save();
        ctx.strokeStyle = 'transparant';
        ctx.arc(35, coverInfo.size.height + 25, 15, 0, 2 * Math.PI,false);
        // ctx.stroke();
        ctx.clip();
        ctx.drawImage(result[2].path, 20, coverInfo.size.height + 10, 30, 30);
        ctx.restore();

        let nickname = userInfo.name.length > 6 ? userInfo.name.substring(0, 6) + '...' : userInfo.name;

        utils.fillTextFn(ctx, nickname, 14, '#000000', 60, coverInfo.size.height + 18, box.width-10);
        utils.fillTextFn(ctx, '推荐了文章', 12, '#999999', 70 + ctx.measureText(nickname).width, coverInfo.size.height + 18, box.width - 20);

        utils.fillTextFn(ctx, self.data.articleInfo.title, 16, '#000000', 20, coverInfo.size.height + 60, box.width);
        utils.fillTextFn(ctx, (self.data.articleInfo.descText || '这篇深度好文直击心灵，用眼看用心悟，最美的风景在远处，最好的生活在今天~'), 12, '#999999', 20, coverInfo.size.height + 90, box.width-10, true);

        ctx.drawImage('../../images/article-line.png', 20, coverInfo.size.height + 160, coverInfo.size.width - 40, 1);
        
        utils.fillTextFn(ctx, '长按识别小程序码', 12, '#999999', 20, coverInfo.size.height + 200, 120);
        utils.fillTextFn(ctx, '进入阅读全文', 12, '#999999', 20, coverInfo.size.height + 220, 120);
        
        ctx.draw(true, self.saveImage);

        wx.hideLoading();
      }).catch(self.errMessage);
    }).exec();
  },

  saveImage: function() {
    wx.createSelectorQuery().select('.cover_box').fields({
      size: true,
    }, (box) => {
      wx.canvasToTempFilePath({
        fileType: "png",
        destWidth: box.width * 3,
        destHeight: box.height * 3,
        canvasId: 'canvas_cover',
        success: (res) => {
          wx.saveImageToPhotosAlbum({
            filePath: res.tempFilePath,
            success: (res) => {
              self.setData({
                coverSaveStatus: 1
              });
              if (getApp().globalData.userInfo) {
                switch (true) {
                  case !!self.data.articleid: 
                    utilStatistics.behaviorRecord({ type: "be_share_article", targetUser: '', targetClass: '', userClass: '', articleId: self.data.articleid, comment: "分享文章", action: "分享", forwardingUser: getApp().globalData.userInfo.data[0].user_uuid, clientType: 'weapp' }, () => { });

                    activityService.analysisSave({
                      as_from: 'weapp',
                      as_type: 'scan_share',
                      as_belong_module: self.data.articleid,
                      as_belong_user: getApp().globalData.userInfo.data[0].user_uuid || '',
                      as_belong_id: ''
                    });

                    articleService.updateArtical({
                      id: self.data.articleid
                    }, () => { });
                    break;
                  default:
                    // 分享数+1
                    activityService.analysisSave({
                      as_from: 'weapp',
                      as_type: 'scan_share',
                      as_belong_module: self.data.h5Info.relationId,
                      as_belong_user: getApp().globalData.userInfo.data[0].user_uuid,
                      as_belong_id: self.data.h5Info.businessInfo.businessId
                    });
                    if (self.data.h5Info.manuscriptType!==2){
                      utilStatistics.behaviorRecord({ type: "be_share_manu", targetUser: '', targetClass: '', userClass: self.data.h5Info.businessInfo.businessId, manuscriptId: self.data.h5Info.relationId, comment: "分享活动", action: "分享", forwardingUser: getApp().globalData.userInfo.data[0].user_uuid, clientType: 'weapp', goodsCount: self.data.h5Info.goodsNumber }, () => { });
                    }
                    break;
                }
              }
            },
            fail: (err) => {
              utils.toast.fail({
                title: "图片保存失败"
              });
              console.error("图片保存失败", err);
              self.setData({
                coverSaveStatus: 2
              });
            }
          })
        },
        fail: self.errMessage
      })
    }).exec();
  },

  showHelp: function() {
    let urls = [`${config.bosHost}help-share-moments.png`];
    wx.previewImage({
      current: urls[0],
      urls: urls
    })
  },

  errMessage: function(err) {
    wx.hideLoading();
    utils.toast.fail({
      title: "图片生成失败"
    });
    console.error(err);
  }
})