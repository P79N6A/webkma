const utils = require('../../utils/util.js');
const config = require('../../config.js');
Component({
  /**
   * 组件的属性列表
   */
  properties: {
    userData: {
      type: Object,
      value: {},
      observer: function (newVal, oldVal) {
        this.setData({
          paintData: newVal
        })
      }
    },
    showModal: {
      type: Boolean,
      value: false
    }
  },
  lifetimes: {
    ready: function () {
      this.buildBossImg();
      wx.$on('drawReport',() => {
        this.buildBossImg();
      })
    }
  },

  /**
   * 组件的初始数据
   */
  data: {
    imgSrc: '',
    coverSaveStatus: 0,
    paintData: {}
  },
  /**
   * 组件的方法列表
   */
  methods: {
    fillText: function (ctx, str, fontSize, color, x, y, maxWidth) {
      ctx.setTextBaseline('top');
      ctx.setFontSize(fontSize);
      ctx.setFillStyle(color);
      ctx.fillText(str, x, y);
    },
    buildBossImg: function (download){
      let self = this;
      wx.createSelectorQuery().in(this).select('.canvas_box').fields({
        size: true
      }, (box) => {
        console.log('开始绘图');
        let rate = box.width / 500;
        const ctx = wx.createCanvasContext('canvas_cover',this);
        new Promise((resolve, reject) => {
          wx.getImageInfo({
            src: 'https://resource.tuixb.cn/beta/00000000-0000-0000-0000-000000000000/KMA/miniapp/report_img2.png',
            success: resolve,
            fail: reject
          })
          // resolve('/images/report_img2.png');
        }).then((result) => {
          ctx.drawImage(result.path, 0, 0, 500 * rate, 534 * rate);
          ctx.setFontSize(20 * rate);
          self.fillText(ctx, '累计总获客', 20 * rate, '#3C4A55', 200 * rate, 31 * rate);

          let target_left = (500 * rate - ctx.measureText(self.data.paintData.getTargetNum).width) / 2;
          self.fillText(ctx, self.data.paintData.getTargetNum, 20 * rate, '#24D0C6', target_left, 66 * rate);

          self.fillText(ctx, '总投入', 20 * rate, '#B1BFCD', 139 * rate, 208 * rate);
          self.fillText(ctx, `￥${self.data.paintData.plunge}`, 20 * rate, '#FA766B', 201 * rate, 208 * rate);
          self.fillText(ctx, '总收益', 20 * rate, '#B1BFCD', 294 * rate, 208 * rate);
          self.fillText(ctx, `￥${self.data.paintData.income}`, 20 * rate, '#FA766B', 356 * rate, 208 * rate);

          self.fillText(ctx, '总曝光', 20 * rate, '#B1BFCD', 139 * rate, 290 * rate);
          self.fillText(ctx, `${self.data.paintData.despose}`, 20 * rate, 'rgba(36,208,198,1)', 202 * rate, 290 * rate);
          self.fillText(ctx, '浏览总时长', 20 * rate, '#B1BFCD', 268 * rate, 290 * rate);
          self.fillText(ctx, `${self.data.paintData.time}`, 20 * rate, 'rgba(36,208,198,1)', 370 * rate, 290 * rate);

          self.fillText(ctx, '总任务', 20 * rate, '#B1BFCD', 139 * rate, 372 * rate);
          self.fillText(ctx, `${self.data.paintData.taskNum}`, 20 * rate, 'rgba(36,208,198,1)', 202 * rate, 372 * rate);
          self.fillText(ctx, '完成', 20 * rate, '#B1BFCD', 268 * rate, 372 * rate);
          self.fillText(ctx, `${self.data.paintData.complete}`, 20 * rate, 'rgba(36,208,198,1)', 310 * rate, 372 * rate);

          self.fillText(ctx, '员工前3名', 20 * rate, '#B1BFCD', 140 * rate, 438 * rate);
          let employee_1_width = ctx.measureText(self.data.paintData.employee[0].name + '/').width;
          let employee_2_width = ctx.measureText(self.data.paintData.employee[1].name + '/').width;
          let employee_3_width = ctx.measureText(self.data.paintData.employee[2].name + '/').width;
          self.fillText(ctx, `${self.data.paintData.employee[0].name}/`, 20 * rate, '#B1BFCD', 140 * rate, 467 * rate);
          self.fillText(ctx, `${self.data.paintData.employee[1].name}/`, 20 * rate, '#B1BFCD', 250 * rate, 467 * rate);
          self.fillText(ctx, `${self.data.paintData.employee[2].name}/`, 20 * rate, '#B1BFCD', 360 * rate, 467 * rate);

          self.fillText(ctx, self.data.paintData.employee[0].score, 20 * rate, 'rgba(246,132,17,1)', 140 * rate + employee_1_width, 467 * rate);
          self.fillText(ctx, self.data.paintData.employee[1].score, 20 * rate, 'rgba(246,132,17,1)', 250 * rate + employee_2_width, 467 * rate);
          self.fillText(ctx, self.data.paintData.employee[2].score, 20 * rate, 'rgba(246,132,17,1)', 360 * rate + employee_3_width, 467 * rate);

          ctx.draw(true, setTimeout(() => {
            self.saveImage();
          }, 1000));
        });

        
      }).exec();
    },
    saveImage: function () {
      let self = this;
      wx.createSelectorQuery().in(this).select('.canvas_box').fields({
        size: true
      }, (box) => {
        wx.canvasToTempFilePath({
          fileType: "png",
          destWidth: box.width * 3,
          destHeight: box.height * 3,
          canvasId: 'canvas_cover',
          success: (res) => {
            self.data.imgSrc = res.tempFilePath;
            wx.hideLoading();
          }
        }, self)
       
      }).exec();
    },
    // 下载图片
    downloadImg: function () {
      let self = this;
      wx.showLoading({
        title: '图片下载中'
      });
      wx.saveImageToPhotosAlbum({
        filePath: self.data.imgSrc,
        success: (res) => {
          self.setData({
            coverSaveStatus: 1
          });
          wx.hideLoading();
          utils.toast.success({
            title: "图片下载成功"
          });
        },
        fail: (err) => {
          wx.hideLoading();
          utils.toast.fail({
            title: "图片下载失败"
          });
          console.error("图片下载失败", err);
          self.setData({
            coverSaveStatus: 2
          });
        }
      }, self);
    },
    // 授权使用保存到相册功能回调
    saveImg: function () {
      this.setData({
        coverSaveStatus: 1
      });
      this.downloadImg();
    },
    closeModal: function(){
      this.setData({
        showModal: false,
        coverSaveStatus: 0
      });
      this.triggerEvent('parentEvent', false); //myevent自定义名称事件，父组件中使用
    },
    showHelp: function () {
      let urls = [`${config.bosHost}help-share-moments.png`];
      wx.previewImage({
        current: urls[0],
        urls: urls
      })
    }
  }
})