// pages/activity-detail/activity-detail.js

let activityService = require('../../services/activity-service.js'),
  cardsService = require('../../services/cards.js'),
  config = require('../../config.js');
Page({

  /**
   * 页面的初始数据
   */
  data: {
    id: '', //活动id
    profile_key: '', //自定义id（小程序码）
    userInfo: {},
    bussinessUrl: '', //模板预览链接
    pageStatus: '', //page请求状态

    analysisObj: {
      "forwardKey": '',
      "relationId": '', //模板id或自定义id（小程序码）
      "rootUserId": '', //分享者id
      "clientType": 'weapp',
      "timeStamp": ''
    },
    activityInfo: {},

    message: '加载中...',
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function(options) {
    var self = this;
    self.data.userInfo = getApp().globalData.userInfo;
    self.data.analysisObj.relationId = self.data.id = options.id || '';
    self.data.analysisObj.rootUserId = options.rootUserId || self.data.userInfo.userId;
    self.data.analysisObj.forwardKey = options.forwardKey || '';
    self.data.analysisObj.timeStamp = options.timeStamp || '';
    self.data.taskId = options.taskId || ''; //推送任务id
    
    self.data.profile_key = options.profile_key || '';
    self.data.origin = options.origin || '';  

    new Promise((resolve, reject) => { 
      let option = {
        relationId: self.data.analysisObj.relationId,
        rootUserId: self.data.analysisObj.rootUserId || self.data.userInfo.userId,
        forwardKey: self.data.analysisObj.forwardKey,
        sourceType: 0,
        clientType: 'weapp'
      };
      activityService.getforwardKey(option, (err, res) => {//获取转发者forwardkey
        if (!!res && res.status == 0) {
          self.data.analysisObj.forwardkey = res.data;
        }
        resolve(null);
      });
    }).then((result) => {
      //来自小程序码  
      if (!!self.data.origin && !!self.data.profile_key) {
        new Promise((resolve, reject) => {
          //根据id查询小程序码参数
          cardsService.getCustomConfig({
            id: self.data.profile_key
          }, function (err, res) {
            if (res.status == 0) {
              resolve(res.data);
            } else {
              reject();
            }
          })
        }).then((result) => {
          self.data.analysisObj.relationId = result.data.id;
          self.data.analysisObj.rootUserId = result.data.rootUserId || '';
          self.data.analysisObj.forwardKey = result.data.forwardKey || '';
          self.data.analysisObj.timeStamp = result.data.timeStamp || '';
          self.loadPage();
        });
      } else {
        self.loadPage();
      }
    }).catch(() => {
      utils.toast.fail({
        title: "获取分享key失败"
      });
    })  
  },
  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function() {
    wx.pauseVoice();
    var self = this;
    // 离开时统计访问时长
    activityService.behaviorRecord({
      "forwardKey": self.data.analysisObj.forwardkey,
      "relationId": self.data.analysisObj.relationId,
      "rootUserId": self.data.analysisObj.rootUserId,
      "clientType": "weapp",
      "indexType": "user_report_time",
      "timeStamp": self.data.analysisObj.timeStamp || ''
    });
  },

  onMessageHandler: function(e) {
    console.log(e);
  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function(e) {
    var self = this;
    let data = self.data.activityInfo,
      timeStamp = new Date().getTime(),
      analysisObj = self.data.analysisObj;
    // 分享+1
    activityService.behaviorRecord({
      "forwardKey": self.data.analysisObj.forwardkey,
      "relationId": self.data.analysisObj.relationId,
      "rootUserId": self.data.analysisObj.rootUserId,
      "clientType": "weapp",
      "indexType": "user_forward",
      "timeStamp": timeStamp
    });

    return {
      title: data.name,
      path: `/pages/index/index?target=` + encodeURIComponent(`/pages/activity-detail/activity-detail?id=${data.analysisObj.relationId}&rootUserId=${self.data.analysisObj.rootUserId}&forwardKey=${self.data.analysisObj.forwardkey}&timeStamp=${timeStamp}`),
      imageUrl: data.cover,
      success: function(res) {}
    }


  },
  //获取活动详情
  getActivityInfo: function() {
    let self = this;
    return new Promise((resolve, reject) => {
      activityService.activityInfo(self.data.id, (err, res) => {
        if (err) {
          return this.setData({
            pageStatus: "error-network",
            message: err.message
          });
        }
        if (res.status !== 0) {
          return this.setData({
            pageStatus: "error-data",
            message: res.message
          });
        }

        wx.setNavigationBarTitle({
          title: res.data.name
        });

        let url = res.data.url;
        self.data.bussinessUrl = url + (url.indexOf('?') > -1 ? '&' : '?') + 'session_id=' + self.data.userInfo.session_id + '&id=' + res.data.relationId + '&secret_key=' + config.secretKey + '&rootUserId=' + self.data.analysisObj.rootUserId + '&userId=' + self.data.analysisObj.as_user + '&forwardKey=' + self.data.analysisObj.forwardKey + '&activityName=' + res.data.name + '#wechat_redirect';

        self.setData({
          activityInfo: res.data,
          bussinessUrl: self.data.bussinessUrl,
          pageStatus: ""
        });

        return resolve(res.data)
      });
    })
  },
  loadPage: function() {
    let self = this;
    
    self.getActivityInfo().then((result) => {
      if(result.goodsNumber > 0){
        wx.hideShareMenu();
      }
      // 浏览数+1
      activityService.behaviorRecord({
        "forwardKey": self.data.analysisObj.forwardkey,
        "relationId": self.data.analysisObj.relationId,
        "rootUserId": self.data.analysisObj.rootUserId,
        "clientType": "weapp",
        "indexType": "user_browse",
        "timeStamp": self.data.analysisObj.timeStamp || ''
      });
      // 来自任务推送，记推送阅读数
      if(!!self.data.taskId){
        activityService.readManuscript({
          "manuscript_push_id": parseInt(self.data.taskId),
          "business_id": result.businessInfo.businessId
        });
      }
    })
  }

})